File: App.tsx
Line: 8 -21
<Router>
  <nav>
    <ul>
      <li><Link to="/">Home</Link></li>
      <li><Link to="/console">Console Page</Link></li>
      <li><Link to="/schedule-hobby">Schedule Hobby</Link></li>
    </ul>
  </nav>
  <Routes>
    <Route path="/console" element={<ConsolePage />} />
    <Route path="/schedule-hobby" element={<ScheduleHobbyForm />} />
    <Route path="/" element={<h1>Welcome to the App</h1>} />
  </Routes>
</Router>
File: ConsolePage.tsx, 
Line: 192-199
  if (client.getTurnDetectionType() === 'server_vad') {
    // Debug audio data
    await wavRecorder.record((data) => {
      console.log('Audio Data:', data.mono); // Log audio data for debugging
      client.appendInputAudio(data.mono);
    });
  }
}, []);
File: index.js, 
Line: all

import express from 'express';
import dotenv from 'dotenv';
import fs from 'fs';
import readline from 'readline';
import { google } from 'googleapis';
import { RealtimeRelay } from './lib/relay.js';

dotenv.config({ override: true });

// Load environment variables for OpenAI and Google Calendar
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const credentialsPath = process.env.GOOGLE_CALENDAR_CREDENTIALS;
const tokenPath = process.env.GOOGLE_CALENDAR_TOKEN;
const SCOPES = ['https://www.googleapis.com/auth/calendar'];

// Ensure OpenAI API key is set
if (!OPENAI_API_KEY) {
  console.error(
    `Environment variable "OPENAI_API_KEY" is required.\n` +
    `Please set it in your .env file.`
  );
  process.exit(1);
}

const app = express();
const PORT = parseInt(process.env.PORT) || 8081;

// Initialize RealtimeRelay with OpenAI API key
const relay = new RealtimeRelay(OPENAI_API_KEY);
relay.listen(PORT);

// Function to get Google Calendar service
function getCalendarService() {
  return new Promise((resolve, reject) => {
    // Load client secrets from a local file
    fs.readFile(credentialsPath, (err, content) => {
      if (err) return reject('Error loading client secret file: ' + err);

      authorize(JSON.parse(content), (auth) => {
        const calendar = google.calendar({ version: 'v3', auth });
        resolve(calendar);
      });
    });
  });
}

// Authorize a client with credentials
function authorize(credentials, callback) {
  const { client_secret, client_id, redirect_uris } = credentials.installed;
  const oAuth2Client = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0]);

  // Check if we have previously stored a token.
  fs.readFile(tokenPath, (err, token) => {
    if (err) return getAccessToken(oAuth2Client, callback);
    oAuth2Client.setCredentials(JSON.parse(token));
    callback(oAuth2Client);
  });
}

function getAccessToken(oAuth2Client, callback) {
  const authUrl = oAuth2Client.generateAuthUrl({
    access_type: 'offline',
    scope: SCOPES,
  });
  console.log('Authorize this app by visiting this url:', authUrl);
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });
  rl.question('Enter the code from that page here: ', (code) => {
    rl.close();
    oAuth2Client.getToken(code, (err, token) => {
      if (err) return console.error('Error retrieving access token', err);
      oAuth2Client.setCredentials(token);

      // Store the token to disk for later program executions
      fs.writeFile(tokenPath, JSON.stringify(token), (err) => {
        if (err) console.error(err);
      });
      callback(oAuth2Client);
    });
  });
}

// Function to add an event to Google Calendar
function addHobbyEvent(calendar, hobby, startTime, endTime) {
  const event = {
    summary: hobby,
    description: `Time allocated for ${hobby}`,
    start: {
      dateTime: startTime,
      timeZone: 'America/New_York',  // Adjust time zone accordingly
    },
    end: {
      dateTime: endTime,
      timeZone: 'America/New_York',
    },
  };

  calendar.events.insert({
    auth: calendar.auth,
    calendarId: 'primary',
    resource: event,
  }, (err, event) => {
    if (err) {
      console.log('There was an error contacting the Calendar service: ' + err);
      return;
    }
    console.log('Event created: %s', event.data.htmlLink);
  });
}

// API to schedule a hobby event in Google Calendar
app.post('/schedule-hobby', express.json(), async (req, res) => {
  const { hobby, durationHours } = req.body;
  if (!hobby || !durationHours) {
    return res.status(400).send('Hobby and duration must be provided.');
  }

  try {
    const calendar = await getCalendarService();

    // Calculate start and end time
    const now = new Date();
    const startTime = new Date(now.getTime() + 3600000); // start in 1 hour
    const endTime = new Date(startTime.getTime() + durationHours * 3600000); // add hobby duration

    addHobbyEvent(calendar, hobby, startTime.toISOString(), endTime.toISOString());

    res.status(200).send('Hobby scheduled!');
  } catch (error) {
    console.error(error);
    res.status(500).send('Error scheduling hobby.');
  }
});

// Keep your existing OpenAI RealtimeRelay running on the port
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
File: ScheduleHobbyForm.js, 
Line: all
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';  // Import useNavigate

const ScheduleHobbyForm = () => {
  const [hobby, setHobby] = useState<string>('');
  const [duration, setDuration] = useState<string>('');
  const navigate = useNavigate();  // Initialize the navigate hook

  const scheduleHobby = async (hobby: string, duration: number) => {
    try {
      const response = await fetch('http://localhost:8081/schedule-hobby', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ hobby, durationHours: duration }),
      });
      const result = await response.json();
      console.log(result);

      // Navigate to the next page upon successful scheduling
      navigate('/console');  // Redirect to the ConsolePage or another route

    } catch (error) {
      console.error('Error scheduling hobby:', error);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const durationNumber = Number(duration);
    if (!isNaN(durationNumber)) {
      scheduleHobby(hobby, durationNumber);
    } else {
      console.error('Invalid duration');
    }
  };

  return (
    <div>
      <h2>Schedule a Hobby</h2>
      <form onSubmit={handleSubmit}>
        <label>
          Hobby:
          <input
            type="text"
            value={hobby}
            onChange={(e) => setHobby(e.target.value)}
            required
          />
        </label>
        <label>
          Duration (hours):
          <input
            type="number"
            value={duration}
            onChange={(e) => setDuration(e.target.value)}  // Still store as string
            required
          />
        </label>
        <button type="submit">Schedule</button>
      </form>
    </div>
  );
};

export default ScheduleHobbyForm;

File: src\.enc
Line: all
OPENAI_API_KEY=
GOOGLE_CALENDAR_CREDENTIALS='C:\\Users\\josma\\OneDrive\\Desktop\\New folder (2)\\folder\\files\\user\\198fb9b77fb10d10bae092eea5789295\\credentials.json'
GOOGLE_CALENDAR_TOKEN='C:\\Users\\josma\\OneDrive\\Desktop\\New folder (2)\\folder\\files\\user\\198fb9b77fb10d10bae092eea5789295\\token.pickle'
PORT=8081

